# .github/workflows/ci.yml

name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest

    container:
      # Use an official Node.js image based on Debian 12, ensuring
      # our CI environment matches production.
      image: node:22-bookworm-slim

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This MUST run before `setup-node` so that the correct Yarn version is used for caching.
      - name: Enable Corepack
        run: corepack enable

      - name: Set up Node.js and cache dependencies
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      # The node:bookworm-slim container is minimal and needs extra dependencies for our tools.
      - name: Install System Dependencies
        run: apt-get update && apt-get install -y jq openssl

      - name: Cache Turborepo artifacts
        uses: actions/cache@v4
        with:
          path: .turbo
          key: debian-turbo-${{ github.sha }}
          restore-keys: |
            debian-turbo-

      - name: Install Dependencies
        # Installs dependencies for all workspaces in the monorepo.
        run: yarn install --immutable

      - name: Run Validation Checks
        run: |
          yarn format:check
          yarn lint:check
          yarn type-check
          yarn npm audit
          yarn test
          yarn build

  coverage:
    name: Code Coverage
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    container:
      image: node:22-bookworm-slim
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This MUST run before `setup-node` so that the correct Yarn version is used for caching.
      - name: Enable Corepack
        run: corepack enable

      - name: Set up Node.js and cache dependencies
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      # The node:bookworm-slim container is minimal and needs extra dependencies for our tools.
      - name: Install System Dependencies
        run: apt-get update && apt-get install -y jq openssl

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Generate Coverage Report and Set Outputs
        id: coverage-report
        run: |
          # Use '|| true' to prevent the job from failing if a workspace has no tests
          yarn test:coverage || true

          BACKEND_FILE="apps/backend/coverage/coverage-summary.json"
          FRONTEND_FILE="apps/frontend/coverage/coverage-summary.json"

          COMBINED_SUMMARY=""

          if [ -f "$BACKEND_FILE" ]; then
            BACKEND_SUMMARY=$(cat $BACKEND_FILE | jq -r '.total | .lines.pct as $lines | .statements.pct as $statements | .functions.pct as $functions | .branches.pct as $branches | "**Backend Coverage (Jest)**\n\n| Lines | Statements | Functions | Branches |\n| :---: | :---: | :---: | :---: |\n| \($lines)% | \($statements)% | \($functions)% | \($branches)% |"')
            COMBINED_SUMMARY="${COMBINED_SUMMARY}${BACKEND_SUMMARY}"
          fi

          if [ -f "$FRONTEND_FILE" ]; then
            if [ -n "$COMBINED_SUMMARY" ]; then
              COMBINED_SUMMARY="${COMBINED_SUMMARY}\n\n"
            fi
            FRONTEND_SUMMARY=$(cat $FRONTEND_FILE | jq -r '.total | .lines.pct as $lines | .statements.pct as $statements | .functions.pct as $functions | .branches.pct as $branches | "**Frontend Coverage (Vitest)**\n\n| Lines | Statements | Functions | Branches |\n| :---: | :---: | :---: | :---: |\n| \($lines)% | \($statements)% | \($functions)% | \($branches)% |"')
            COMBINED_SUMMARY="${COMBINED_SUMMARY}${FRONTEND_SUMMARY}"
          fi

          if [ -n "$COMBINED_SUMMARY" ]; then
            echo "summary_generated=true" >> $GITHUB_OUTPUT
            echo "comment_body<<EOF" >> $GITHUB_OUTPUT
            echo -e "$COMBINED_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "summary_generated=false" >> $GITHUB_OUTPUT
            echo "comment_body='No coverage reports found.'" >> $GITHUB_OUTPUT
          fi

      - name: Post Coverage Comment
        # This step only runs if the previous step successfully generated a summary.
        if: steps.coverage-report.outputs.summary_generated == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage
          # It uses the direct output from the previous step. This is robust.
          message: |
            ${{ steps.coverage-report.outputs.comment_body }}
